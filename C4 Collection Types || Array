Swift provides three primary collection types, known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries(like Jave Map) are unordered collections of key-value associations.
Arrays, sets, and dictionaries in Swift are always clear about the types of values and keys that they can store. This means that you cannot insert a value of the wrong type into a collection by mistake. It also means you can be confident about the type of values you will retrieve from a collection.
Swift’s array, set, and dictionary types are implemented as generic collections. 

# 1 Mutability of Collections

If you create an array, a set, or a dictionary, and assign it to a variable, the collection that is created will be mutable. This means that you can change (or mutate) the collection after it is created by adding, removing, or changing items in the collection. If you assign an array, a set, or a dictionary to a constant, that collection is immutable, and its size and contents cannot be changed.

# 2 Arrays

An array stores values of the same type in an ordered list. The same value can appear in an array multiple times at different positions.

Array Type Shorthand Syntax
The type of a Swift array is written in full as Array<Element>, where Element is the type of values the array is allowed to store. You can also write the type of an array in shorthand form as [Element]. Although the two forms are functionally identical, the shorthand form is preferred and is used throughout this guide when referring to the type of an array.

var someInts = [Int]()
print("someInts is of type [Int] with \(someInts.count) items.") // Prints "someInts is of type [Int] with 0 items."

someInts.append(3) // someInts now contains 1 value of type Int

If the context already provides type information, such as a function argument or an already typed variable or constant,you can do:
someInts = [] // someInts is now an empty array, but is still of type [Int]

# Creating an Array with a Default Value

Swift’s Array type also provides an initializer for creating an array of a certain size with all of its values set to the same default value. You pass this initializer the number of items to be added to the new array (called count) and a default value of the appropriate type (called repeatedValue):

var threeDoubles = [Double](count: 3, repeatedValue: 0.0) // threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]

Creating an Array by Adding Two Arrays Together

You can create a new array by adding together two existing arrays with compatible types with the addition operator (+). The new array’s type is inferred from the type of the two arrays you add together:

var anotherThreeDoubles = [Double](count: 3, repeatedValue: 2.5) // anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]
 
var sixDoubles = threeDoubles + anotherThreeDoubles // sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]

var b=[Int](arrayLiteral:8,8,8,8,8,8,9)
var shoppingList: [String] = ["Eggs", "Milk"] // shoppingList has been initialized with two initial items
The shoppingList variable is declared as “an array of string values”, written as [String]. Because this particular array has specified a value type of String, it is allowed to store String values only. Here, the shoppingList array is initialized with two String values ("Eggs" and "Milk"), written within an array literal.

Thanks to Swift’s type inference, you don’t have to write the type of the array if you’re initializing it with an array literal containing values of the same type. The initialization of shoppingList could have been written in a shorter form instead:
var shoppingList = ["Eggs", "Milk"]
Because all values in the array literal are of the same type, Swift can infer that [String] is the correct type to use for the shoppingList variable.

# Accessing and Modifying an Array

You access and modify an array through its methods and properties, or by using subscript syntax.

print("The shopping list contains \(shoppingList.count) items.") // Prints "The shopping list contains 2 items."

Use the Boolean isEmpty property as a shortcut for checking whether the count property is equal to 0:
if shoppingList.isEmpty {
    print("The shopping list is empty.")
} else {
    print("The shopping list is not empty.")
}

You can add a new item to the end of an array by calling the array’s append(_:) method:
shoppingList.append("Flour") // shoppingList now contains 3 items, and someone is making pancakes

Alternatively, append an array of one or more compatible items with the addition assignment operator (+=):
shoppingList += ["Baking Powder"] // shoppingList now contains 4 items
shoppingList += ["Chocolate Spread", "Cheese", "Butter"]// shoppingList now contains 7 items

Retrieve a value from the array by using subscript syntax, passing the index of the value you want to retrieve within square brackets immediately after the name of the array:
var firstItem = shoppingList[0]
// firstItem is equal to "Eggs"

You can use subscript syntax to change an existing value at a given index:
shoppingList[0] = "Six eggs"
// the first item in the list is now equal to "Six eggs" rather than "Eggs"

You can also use subscript syntax to change a range of values at once:
shoppingList[4...6] = ["Bananas", "Apples"]
// 4,5,6 are replaced by Bananas and Apples 6 is empty shoppingList now contains 6 items

To insert an item into the array at a specified index, call the array’s insert(_:atIndex:) method:
shoppingList.insert("Maple Syrup", atIndex: 0) // shoppingList now contains 7 items
// "Maple Syrup" is now the first item in the list

You can’t use subscript syntax to append a new item to the end of an array.
shoppingList.insert("Tea")//error

Similarly, you remove an item from the array with the removeAtIndex(_:) method. This method removes the item at the specified index and returns the removed item (although you can ignore the returned value if you do not need it):
let mapleSyrup = shoppingList.removeAtIndex(0) // the item that was at index 0 has just been removed
// shoppingList now contains 6 items, and no Maple Syrup
// the mapleSyrup constant is now equal to the removed "Maple Syrup" string

Any gaps in an array are closed when an item is removed, and so the value at index 0 is once again equal to "Six eggs"(資料項被移除後陣列中的空出項會被自動填補，所以現在索引值為0的資料項的值再次等於"Six eggs"):
firstItem = shoppingList[0]
// firstItem is now equal to "Six eggs"

If you want to remove the final item from an array, use the removeLast() method rather than the removeAtIndex(_:) method to avoid the need to query the array’s count property. Like the removeAtIndex(_:) method, removeLast() returns the removed item:
let apples = shoppingList.removeLast()
// the last item in the array has just been removed
// shoppingList now contains 5 items, and no apples
// the apples constant is now equal to the removed "Apples" string

You can iterate over the entire set of values in an array with the for-in loop:
for item in shoppingList {
    print(item)
}
If you need the integer index of each item as well as its value, use the enumerate() method to iterate over the array instead. For each item in the array, the enumerate() method returns a tuple composed of the index and the value for that item. You can decompose the tuple into temporary constants or variables as part of the iteration:

for (index, value) in shoppingList.enumerate() {
    print("Item \(index + 1): \(value)")
}
// Item 1: Six eggs
// Item 2: Milk
// Item 3: Flour
// Item 4: Baking Powder
// Item 5: Bananas
