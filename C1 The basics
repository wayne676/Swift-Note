ÔºÉ1   Constants and Variables

  # Declaring Constants and Variables:
let maximumNumberOfLoginAttempts = 10
var currentLoginAttempt = 0

  # Type Annotations:
var red, green, blue: Double

  # Printing Constants and Variables:
var friendlyWelcome = "Hello!"
print(friendlyWelcome)
print("The current value of friendlyWelcome is \(friendlyWelcome)")

#2  Semicolons
However, semicolons are required if you want to write multiple separate statements on a single line:
let cat = "üê±"; print(cat)

#3 Integers
Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms. 
In most cases, you don‚Äôt need to pick a specific size of integer to use in your code. Swift provides an additional integer type, Int, which has the same size as the current platform‚Äôs native word size:

On a 32-bit platform, Int is the same size as Int32.
On a 64-bit platform, Int is the same size as Int64.

let minValue = UInt8.min  // minValue is equal to 0, and is of type UInt8 (unsigned Int)
let maxValue = UInt8.max  // maxValue is equal to 255, and is of type UInt8 (unsigned Int)

#4 Numeric Literals
All of these integer literals have a decimal value of 17:

let decimalInteger = 17
let binaryInteger = 0b10001       // 17 in binary notation
let octalInteger = 0o21           // 17 in octal notation
let hexadecimalInteger = 0x11     // 17 in hexadecimal notation

#5 Numeric Type Conversion
  #Integer Conversion
let twoThousand: UInt16 = 2_000
let one: UInt8 = 1
let twoThousandAndOne = twoThousand + UInt16(one)

  #Integer and Floating-Point Conversion
let three = 3
let pointOneFourOneFiveNine = 0.14159
let pi = Double(three) + pointOneFourOneFiveNine // pi equals 3.14159, and is inferred to be of type Double

let integerPi = Int(pi) // integerPi equals 3, and is inferred to be of type Int

#6 Type Aliases

typealias AudioSample = UInt16
var maxAmplitudeFound = AudioSample.min // maxAmplitudeFound is now 0.Here, AudioSample is defined as an alias for UInt16. Because it is an alias, the call to AudioSample.min actually calls UInt16.min, which provides an initial value of 0 for the maxAmplitudeFound variable.

#7 Booleans
Swift‚Äôs type safety prevents non-Boolean values from being substituted for Bool. The following example reports a compile-time error:
let i = 1
if i {
    // this example will not compile, and will report an error
}
However, the alternative example below is valid:

let i = 1
if i == 1 {
    // this example will compile successfully
}

#8 Tuples
let http404Error = (404, "Not Found") // http404Error is of type (Int, String), and equals (404, "Not Found")

You can decompose a tuple‚Äôs contents into separate constants or variables, which you then access as usual:
let (statusCode, statusMessage) = http404Error
print("The status code is \(statusCode)") // Prints "The status code is 404"
print("The status message is \(statusMessage)") // Prints "The status message is Not Found"

If you only need some of the tuple‚Äôs values, ignore parts of the tuple with an underscore (_) when you decompose the tuple:
let (justTheStatusCode, _) = http404Error
print("The status code is \(justTheStatusCode)") // Prints "The status code is 404"

Alternatively, access the individual element values in a tuple using index numbers starting at zero:
print("The status code is \(http404Error.0)") // Prints "The status code is 404"
print("The status message is \(http404Error.1)") // Prints "The status message is Not Found"

You can name the individual elements in a tuple when the tuple is defined:
let http200Status = (statusCode: 200, description: "OK")

If you name the elements in a tuple, you can use the element names to access the values of those elements:
print("The status code is \(http200Status.statusCode)") // Prints "The status code is 200"
print("The status message is \(http200Status.description)") // Prints "The status message is OK"

#9 Optionals


Here‚Äôs an example of how optionals can be used to cope with the absence of a value. Swift‚Äôs Int type has an initializer which tries to convert a String value into an Int value. However, not every string can be converted into an integer. The string "123" can be converted into the numeric value 123, but the string "hello, world" does not have an obvious numeric value to convert to.

The example below uses the initializer to try to convert a String into an Int:
let possibleNumber = "123"
let convertedNumber = Int(possibleNumber) // convertedNumber is inferred to be of type "Int?", or "optional Int"
Because the initializer might fail, it returns an optional Int, rather than an Int. An optional Int is written as Int?, not Int. The question mark indicates that the value it contains is optional, meaning that it might contain some Int value, or it might contain no value at all. (It can‚Äôt contain anything else, such as a Bool value or a String value. It‚Äôs either an Int, or it‚Äôs nothing at all.)

If you define an optional variable without providing a default value, the variable is automatically set to nil for you

#If Statements and Forced Unwrapping
You can use an if statement to find out whether an optional contains a value by comparing the optional against nil. You perform this comparison with the ‚Äúequal to‚Äù operator (==) or the ‚Äúnot equal to‚Äù operator (!=).
If an optional has a value, it is considered to be ‚Äúnot equal to‚Äù nil:

if convertedNumber != nil {
    print("convertedNumber contains some integer value.")
} // Prints "convertedNumber contains some integer value."

Once you‚Äôre sure that the optional does contain a value, you can access its underlying value by adding an exclamation mark (!) to the end of the optional‚Äôs name. The exclamation mark effectively says, ‚ÄúI know that this optional definitely has a value; please use it.‚Äù This is known as forced unwrapping of the optional‚Äôs value:

if convertedNumber != nil {
    print("convertedNumber has an integer value of \(convertedNumber!).")
} // Prints "convertedNumber has an integer value of 123."

  NOTE:
  Trying to use ! to access a nonexistent optional value triggers a runtime error. Always make sure that an optional contains a non-nil value before using ! to force-unwrap its value.
  
#Optional Binding
You use optional binding to find out whether an optional contains a value, and if so, to make that value available as a temporary constant or variable. Optional binding can be used with if and while statements to check for a value inside an optional, and to extract that value into a constant or variable, as part of a single action. if and while statements are described in more detail in Control Flow.

Write an optional binding for an if statement as follows:
if let constantName = someOptional {
    statements
}
You can include multiple optional bindings in a single if statement and use a where clause to check for a Boolean condition. If any of the values in the optional bindings are nil or the where clause evaluates to false, the whole optional binding is considered unsuccessful.

if let firstNumber = Int("4"), secondNumber = Int("42") where firstNumber < secondNumber {
    print("\(firstNumber) < \(secondNumber)")
} // Prints "4 < 42"

#Implicitly Unwrapped Optionals
Sometimes it is clear from a program‚Äôs structure that an optional will always have a value, after that value is first set. In these cases, it is useful to remove the need to check and unwrap the optional‚Äôs value every time it is accessed, because it can be safely assumed to have a value all of the time
let possibleString: String? = "An optional string."
let forcedString: String = possibleString! // requires an exclamation mark
 
let assumedString: String! = "An implicitly unwrapped optional string."
let implicitString: String = assumedString // no need for an exclamation mark

#10 Error Handling
Here‚Äôs an example of how error handling can be used to respond to different error conditions:

func makeASandwich() throws {
    // ...
}
 
do {
    try makeASandwich()
    eatASandwich()
} catch Error.OutOfCleanDishes {
    washDishes()
} catch Error.MissingIngredients(let ingredients) {
    buyGroceries(ingredients)
}

#11 Assertions
In some cases, it is simply not possible for your code to continue execution if a particular condition is not satisfied. In these situations, you can trigger an assertion in your code to end code execution and to provide an opportunity to debug the cause of the absent or invalid value.

You use an assertion to make sure that an essential condition is satisfied before executing any further code. If the condition evaluates to true, code execution continues as usual; if the condition evaluates to false, code execution ends, and your app is terminated.
let age = -3
assert(age >= 0, "A person's age cannot be less than zero") // this causes the assertion to trigger, because age is not >= 0

In this example, code execution will continue only if age >= 0 evaluates to true, that is, if the value of age is non-negative. If the value of age is negative, as in the code above, then age >= 0 evaluates to false, and the assertion is triggered, terminating the application.

The assertion message can be omitted if desired, as in the following example:
assert(age >= 0)

