ÔºÉ1   Constants and Variables

  # Declaring Constants and Variables:
let maximumNumberOfLoginAttempts = 10
var currentLoginAttempt = 0

  # Type Annotations:
var red, green, blue: Double

  # Printing Constants and Variables:
var friendlyWelcome = "Hello!"
print(friendlyWelcome)
print("The current value of friendlyWelcome is \(friendlyWelcome)")

#2  Semicolons
However, semicolons are required if you want to write multiple separate statements on a single line:
let cat = "üê±"; print(cat)

#3 Integers
Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms. 
In most cases, you don‚Äôt need to pick a specific size of integer to use in your code. Swift provides an additional integer type, Int, which has the same size as the current platform‚Äôs native word size:

On a 32-bit platform, Int is the same size as Int32.
On a 64-bit platform, Int is the same size as Int64.

let minValue = UInt8.min  // minValue is equal to 0, and is of type UInt8 (unsigned Int)
let maxValue = UInt8.max  // maxValue is equal to 255, and is of type UInt8 (unsigned Int)

#4 Numeric Literals
All of these integer literals have a decimal value of 17:

let decimalInteger = 17
let binaryInteger = 0b10001       // 17 in binary notation
let octalInteger = 0o21           // 17 in octal notation
let hexadecimalInteger = 0x11     // 17 in hexadecimal notation

#5 Numeric Type Conversion
  #Integer Conversion
let twoThousand: UInt16 = 2_000
let one: UInt8 = 1
let twoThousandAndOne = twoThousand + UInt16(one)

  #Integer and Floating-Point Conversion
let three = 3
let pointOneFourOneFiveNine = 0.14159
let pi = Double(three) + pointOneFourOneFiveNine // pi equals 3.14159, and is inferred to be of type Double

let integerPi = Int(pi) // integerPi equals 3, and is inferred to be of type Int

#6 Type Aliases

typealias AudioSample = UInt16
var maxAmplitudeFound = AudioSample.min // maxAmplitudeFound is now 0.Here, AudioSample is defined as an alias for UInt16. Because it is an alias, the call to AudioSample.min actually calls UInt16.min, which provides an initial value of 0 for the maxAmplitudeFound variable.

#7 Booleans
Swift‚Äôs type safety prevents non-Boolean values from being substituted for Bool. The following example reports a compile-time error:
let i = 1
if i {
    // this example will not compile, and will report an error
}
However, the alternative example below is valid:

let i = 1
if i == 1 {
    // this example will compile successfully
}

#8 Tuples
let http404Error = (404, "Not Found") // http404Error is of type (Int, String), and equals (404, "Not Found")

You can decompose a tuple‚Äôs contents into separate constants or variables, which you then access as usual:
let (statusCode, statusMessage) = http404Error
print("The status code is \(statusCode)") // Prints "The status code is 404"
print("The status message is \(statusMessage)") // Prints "The status message is Not Found"

If you only need some of the tuple‚Äôs values, ignore parts of the tuple with an underscore (_) when you decompose the tuple:
let (justTheStatusCode, _) = http404Error
print("The status code is \(justTheStatusCode)") // Prints "The status code is 404"

Alternatively, access the individual element values in a tuple using index numbers starting at zero:
print("The status code is \(http404Error.0)") // Prints "The status code is 404"
print("The status message is \(http404Error.1)") // Prints "The status message is Not Found"

You can name the individual elements in a tuple when the tuple is defined:
let http200Status = (statusCode: 200, description: "OK")

If you name the elements in a tuple, you can use the element names to access the values of those elements:
print("The status code is \(http200Status.statusCode)") // Prints "The status code is 200"
print("The status message is \(http200Status.description)") // Prints "The status message is OK"

#9 Optionals
Here‚Äôs an example of how optionals can be used to cope with the absence of a value. Swift‚Äôs Int type has an initializer which tries to convert a String value into an Int value. However, not every string can be converted into an integer. The string "123" can be converted into the numeric value 123, but the string "hello, world" does not have an obvious numeric value to convert to.
